Channelling a filesystem

Roger Peppe
Canonical Ltd
rogpeppe@gmail.com
@rogpeppe

* Composition with channels

- Lots of examples of how to make concurrent requests.
- Not so many illustrating the power of composition.
- Composition: plugging arbitrary modules together.
- Pipelines with information feedback.
- Perhaps points the way to future possibilities.

* Original motivation

- Early 2000s, Limbo
- Different language, almost same channel semantics
- Serving filesystem data to clients for compute tasks
- Want to combine static and dynamic data

* "State of the art": tar

- Requires that all fs data is written to disk
- No easy way to combine two tar files
- We can do better

* The building blocks

- walk: open a directory, produce a stream fs
- bundle: read stream fs, write archive format
- unbundle: read archive format, produce stream fs
- write: read stream fs, write it to disk
- merge: take *two* stream fs's, write stream fs
- (merge is possible because directory entries are ordered)

* The glue

	type FS <-chan Item
	
	// Item represents an item of filesystem data. If Dir is non-nil, the
	// item represents a directory entry. If Data is non-empty, the item
	// represents a data block.
	//
	// When an item is received, the receiver is expected to send on the
	// reply channel to indicate the next thing for the sender to do.
	type Item struct {
		// Dir holds information about a file.
		// It is nil when sending a file's data.
		Dir os.FileInfo
	
		// Path holds the full path of the item, or the empty string
		// if Dir is nil.
		Path string
	
		// Data holds a file's data block.
		Data  []byte
	
		// Answer must be used to send a reply
		// to the item.
		Reply chan<- Answer
	}

* Answers

	const (
		// Quit requests the sender to stop sending data.
		Quit Answer = iota
		// Down requests the sender to show the contents
		// of the item. This should only be used to reply
		// to directory entry items.
		Down
		// Next requests that the sender send the next
		// item without descending into it.
		Next
		// Skip requests that the sender skip over
		// all remaining items in the current file or directory.
		Skip
	)

* A unit

- Read an item from the channel
- Decide what to do with it (might defer to downstream)
- Reply with the decision
- Repeat until all items processed.

* Small example filesystem:

	/home
	/home/rog
	/home/rog/README
	/home/rog/hello.go

* Messages

	-> Item{Dir: statOf("/home")}
	<- Down
	-> Item{Dir: statOf("/home/rog")}
	<- Down
	-> Item{Dir: statOf("/home/rog/README")}
	<- Down
	-> Item{Data: []byte("This is a very boring README file")}
	<- Next
	-> Item{}
	<- Next
	-> Item{Dir: statOf("/home/rog/hello.go")}
	<- Down
	-> Item{Data: []byte("package main\nmain() {\n\tprintln("hello, world")\n}\n")}
	<- Next
	-> Item{}
	<- Next
	-> Item{}
	<- Next
	-> Item{}
	<- Next
	closed

* Example: copy unchanged

	// Copy copies one item and all its contents from src to
	// dst. It reports whether the stream is still active
	// (the caller should quit if not).
	func Copy(ctx Context, dst chan<- Item, src <-chan Item) bool {
		depth := 1
		reply := make(chan Answer)
	
		for it := range src {
			dst <- it.WithReply(reply)
			r := <-reply
			it.Reply <- r

			...  Handle reply value (see next slide)
		}
		return false
	}

* Example: copy unchanged (continued)

	switch r {
	case Quit:
		return false
	case Next:
		if it.IsEnd() {
			if depth--; depth == 0 {
				return true
			}
		}
	case Skip:
		if depth--; depth == 0 {
			return true
		}
	case Down:
		if !it.IsEnd() {
			depth++
		}
	}

* Other primitives fell out naturally

- size: print total size of entries
- ls: show detailed information on entries
- filter: filter out subtrees
- gates: combine with filters
- pipe: pipe file contents through command.
- ... and more

* These really are pipes!

- Initially used a function-like syntax

	write {unbundle {bundle {walk /data}}} /otherdata

- For testing originally, but then became useful.
- Realised this could naturally be written using pipe syntax:

	walk /data | bundle | unbundle | write /otherdata

- Looks exactly like pipes
- But not one way.

	walk /data | filter {path /data/foo} | bundle | unbundle | write /otherdata

- Walk only descends into /data/foo
- Later modules in the pipeline affect earlier ones.
- But still very "plug and play".

* Live demo

- Let's try to code up an fs module - you choose!
- filter?
- size?
- merge?
